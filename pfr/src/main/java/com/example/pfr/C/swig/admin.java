/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.example.pfr.C.swig;

public class admin implements adminConstants {
  public static int lireDescripteur(String nomDescripteur) {
    return adminJNI.lireDescripteur(nomDescripteur);
  }

  public static int ajouterUnFichier(String cheminFichier, String nomFichier, String cheminDossierFichiers, String fichierDescripteur, String typeFichier) {
    return adminJNI.ajouterUnFichier(cheminFichier, nomFichier, cheminDossierFichiers, fichierDescripteur, typeFichier);
  }

  public static int supprFichier(String CheminFichier, String nomFichier, String cheminDescripteur, String fichierDescripteur, String typeFichier) {
    return adminJNI.supprFichier(CheminFichier, nomFichier, cheminDescripteur, fichierDescripteur, typeFichier);
  }

  public static int refaireUnDescripteur(String dossierFichier, String nomFichier, String fichierDescripteur, String typeFichier) {
    return adminJNI.refaireUnDescripteur(dossierFichier, nomFichier, fichierDescripteur, typeFichier);
  }

  public static int reindexerTousLesFichiers(String nomFichierDescripteur, String dossierFichier, String type) {
    return adminJNI.reindexerTousLesFichiers(nomFichierDescripteur, dossierFichier, type);
  }

  public static int indexerTxtSeul(String dossierFichier, String nomFichierAIndexer, String nomFichierStockage) {
    return adminJNI.indexerTxtSeul(dossierFichier, nomFichierAIndexer, nomFichierStockage);
  }

  public static int comparateurString(String string1, String string2) {
    return adminJNI.comparateurString(string1, string2);
  }

  public static int comparerDescripteursTxt(SWIGTYPE_p_p_char motsCles, int i, String fichierDescripteur, FICHIER listeFichiers) {
    return adminJNI.comparerDescripteursTxt(SWIGTYPE_p_p_char.getCPtr(motsCles), i, fichierDescripteur, FICHIER.getCPtr(listeFichiers), listeFichiers);
  }

  public static int comparerDescripteursTxtDoc(String dossierFichierCherche, String NomFichierAChercher, String fichierDescripteur, FICHIER listeFichiers) {
    return adminJNI.comparerDescripteursTxtDoc(dossierFichierCherche, NomFichierAChercher, fichierDescripteur, FICHIER.getCPtr(listeFichiers), listeFichiers);
  }

  public static long quantification(int pixelR, int pixelV, int pixelB) {
    return adminJNI.quantification(pixelR, pixelV, pixelB);
  }

  public static int indexationImage(String dossierFichier, String nomFichierAIndexer, String nomFichierStockage) {
    return adminJNI.indexationImage(dossierFichier, nomFichierAIndexer, nomFichierStockage);
  }

  public static int comparaisonImage(String dossierFichier, String nomFichierAComparer, String fichierDescripteur, FICHIER listeFichiers) {
    return adminJNI.comparaisonImage(dossierFichier, nomFichierAComparer, fichierDescripteur, FICHIER.getCPtr(listeFichiers), listeFichiers);
  }

  public static void tabValeursIntervalles(SWIGTYPE_p_float tab, int nbIntervalle) {
    adminJNI.tabValeursIntervalles(SWIGTYPE_p_float.getCPtr(tab), nbIntervalle);
  }

  public static int indexerAudio(String cheminFichier, String nomFichier, String descripteur) {
    return adminJNI.indexerAudio(cheminFichier, nomFichier, descripteur);
  }

  public static int comparerAudio(String cheminFichier, String nomFichier, String descripteurs, FICHIER listeFichiers, int nbIntervalle, int echantillonage) {
    return adminJNI.comparerAudio(cheminFichier, nomFichier, descripteurs, FICHIER.getCPtr(listeFichiers), listeFichiers, nbIntervalle, echantillonage);
  }

  public static void triListeFichiers(FICHIER f) {
    adminJNI.triListeFichiers(FICHIER.getCPtr(f), f);
  }

}
